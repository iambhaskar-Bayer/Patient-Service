name: App Build appointment CI/CD
on:
  push:
    branches:
      - main
  workflow_dispatch: null
  pull_request:
    branches:
      - main
jobs:
  react-app-build:
    runs-on: ubuntu-latest
    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
    
      - name: Official SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v3.0.0
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=hackathon-proj -Dsonar.host.url=${{ env.SONAR_HOST_URL
            }} -Dsonar.login=${{ env.SONAR_TOKEN }}
            -Dsonar.working.directory=./.scannerwork
      
      - name: Print SonarQube Logs
        run: >
          ls -al .scannerwork
          cat .scannerwork/report-task.txt || echo "report-task.txt not found"

     # - name: SonarQube Quality Gate
      #  uses: SonarSource/sonarqube-quality-gate-action@v1.0.0
       # with:
        #  sonar_host_url: ${{ env.SONAR_HOST_URL }}
         # sonar_token: ${{ env.SONAR_TOKEN }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
     
      - name: Build Docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: squad2-ecr
        run: |
          docker build -t squad2-ecr .
          
      - name: Scan Docker image with Trivy for any vulnerabilities
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --severity HIGH,CRITICAL squad2-ecr:latest

   #   - name: Log in to GHCR
    #    run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

     # - name: Scan Docker image with Trivy for any vulnerabilities
      #  run: |
       #   docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --severity LOW,MEDIUM,HIGH,CRITICAL mock-ecr-repo:latest

      #Tag Docker image
      - name: Tag Docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: squad2-ecr
        run: |
          docker tag squad2-ecr:latest 326319537952.dkr.ecr.us-east-1.amazonaws.com/squad2-ecr:latest
          
      # Push Docker image to Amazon ECR (latest only)
      - name: Push Docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: squad2-ecr
        run: |
          docker push 326319537952.dkr.ecr.us-east-1.amazonaws.com/squad2-ecr:latest
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
           version: 'v1.24.0' # default is latest stable
        id: install
        
      - name: Update kube config
        run: aws eks update-kubeconfig --region us-east-1 --name sq2-hack1
      
      - name: Deploy to EKS
        run: |
          kubectl apply -f deployment.yaml
